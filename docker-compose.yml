services:
  db_auth:
    image: postgres:15.6
    restart: always
    volumes:
      - ./db_auth_data:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/auth_service/
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: auth_service

  db_courses:
    image: postgres:15.6
    restart: always
    volumes:
      - ./db_courses_data:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/courses_service/
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: courses_service

  db_user:
    image: postgres:15.6
    restart: always
    volumes:
      - ./db_user_data:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/user_service/
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_service

#  db_kong:
#    image: postgres:15.6
#    restart: always
#    volumes:
#      - ./db_kong_data:/var/lib/postgresql/data
#    environment:
#      PGDATA: /var/lib/postgresql/data/kong/
#      POSTGRES_USER: kong
#      POSTGRES_DB: kong
#      POSTGRES_PASSWORD: kong
#    ports:
#    - "5432:5432"

  redis:
    image: redis:latest
    restart: always

#  kong_migrations:
#    image: kong:latest
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: db_kong
#      KONG_PG_PASSWORD: kong
#    depends_on:
#      - db_kong
#    command: ["sh", "-c", "./wait-for-it.sh db_kong:5432 -- kong migrations bootstrap"]
#    volumes:
#      - ./wait-for-it.sh:/wait-for-it.sh
#
#  kong:
#    image: kong:latest
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: db_kong
#      KONG_PG_PASSWORD: kong
#      KONG_PROXY_ACCESS_LOG: /dev/stdout
#      KONG_ADMIN_ACCESS_LOG: /dev/stdout
#      KONG_PROXY_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_ERROR_LOG: /dev/stderr
#      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#    ports:
#    - "8000:8000"
#    - "8001:8001"
#    depends_on:
#      - kong_migrations
#    command: ["sh", "-c", "./wait-for-it.sh kong_migrations:8001 -- kong start"]
#    volumes:
#      - ./wait-for-it.sh:/wait-for-it.sh

  rabbitmq:
    image: rabbitmq:3.13.1-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  auth_service:
    build:
      context: ./auth_service
    container_name: auth-service
    command: ["./wait-for-it.sh", "db_auth:5432", "--", "sh", "-c", "python manage.py migrate &&
              uwsgi --ini /auth_service/config/uwsgi/uwsgi.ini"]
    volumes:
      - ./auth_service:/auth_service
    environment:
      - DJANGO_SETTINGS_MODULE=auth_service.settings.prod
      - POSTGRES_DB=auth_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
     - db_auth

  auth_service_worker:
    build:
      context: ./auth_service 
    command: celery -A auth_service worker -l info
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=auth_service.settings.prod
      - POSTGRES_DB=auth_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - auth_service
      - rabbitmq

  courses_service:
    build:
      context: ./courses_service
    container_name: courses-service
    command: ["./wait-for-it.sh", "db_courses:5432", "--", "sh", "-c", "python manage.py migrate &&
              uwsgi --ini /courses_service/config/uwsgi/uwsgi.ini"]
    volumes:
      - ./courses_service:/courses_service
    environment:
      - DJANGO_SETTINGS_MODULE=courses_service.settings.prod
      - POSTGRES_DB=courses_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
     - db_courses

  courses_service_worker:
    build: 
      context: ./courses_service 
    command: celery -A courses_service worker -l info
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=courses_service.settings.prod
      - POSTGRES_DB=courses_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - courses_service
      - rabbitmq

  user_service:
    build:
      context: ./user_service
    container_name: user-service
    command: ["./wait-for-it.sh", "db_user:5432", "--", "sh", "-c", "python manage.py migrate &&
              uwsgi --ini /user_service/config/uwsgi/uwsgi.ini"]
    volumes:
     - ./user_service:/user_service
    environment:
      - DJANGO_SETTINGS_MODULE=user_service.settings.prod
      - POSTGRES_DB=user_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - db_user

  daphne:
    build:
      context: ./user_service
    command: ["./wait-for-it.sh", "db_user:5432", "--", "daphne", "-u",
              "/user_service/daphne.sock", "user_service.asgi:application"]
    volumes:
      - ./user_service:/user_service
    environment:
      - DJANGO_SETTINGS_MODULE=user_service.settings.prod
      - POSTGRES_DB=user_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - db_user
      - redis
        
  user_service_worker:
    build:
      context: ./user_service 
    command: celery -A user_service worker -l info
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=user_service.settings.prod
      - POSTGRES_DB=user_service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    depends_on:
      - user_service
      - rabbitmq

  nginx:
    image: nginx:1.23.1
    restart: always
    volumes:
      - ./config/nginx:/etc/nginx/templates
      - ./auth_service:/auth_service
      - ./courses_service:/courses_service
      - ./user_service:/user_service
      - ./config/ssl:/edproj/config/ssl
    ports:
      - "80:80"
      - "443:443"

volumes:
  db_auth_data:
  db_courses_data:
  db_user_data: